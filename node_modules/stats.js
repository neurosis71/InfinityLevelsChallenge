
/********** public function ***************/

//process line to create stats
var getLineStat = function(line, processorData){
	
	if(line.indexOf(processorData.cpm.searchFor) != -1){
		processorData.cpm.count++;
		processorData.cpm.timeResponses.push(getReponseTime(line));
		processorData.cpm.dynos.push(getDyno(line));
	}else if(line.indexOf(processorData.gm.searchFor) != -1){
		processorData.gm.count++;
		processorData.gm.timeResponses.push(getReponseTime(line));
		processorData.gm.dynos.push(getDyno(line));
	}else if(line.indexOf(processorData.gfp.searchFor) != -1){
		processorData.gfp.count++;
		processorData.gfp.timeResponses.push(getReponseTime(line));
		processorData.gfp.dynos.push(getDyno(line));
	}else if(line.indexOf(processorData.gfs.searchFor) != -1){
		processorData.gfs.count++;
		processorData.gfs.timeResponses.push(getReponseTime(line));
		processorData.gfs.dynos.push(getDyno(line));
	}else if(line.indexOf(processorData.pusers.searchFor) != -1 && line.indexOf(processorData.pusers.searchFor2) != -1){
		processorData.pusers.count++;
		processorData.pusers.timeResponses.push(getReponseTime(line));
		processorData.pusers.dynos.push(getDyno(line));
	}else if(line.indexOf(processorData.gusers.searchFor) != -1 && line.indexOf(processorData.gusers.searchFor2) != -1){
		processorData.gusers.count++;
		processorData.gusers.timeResponses.push(getReponseTime(line));
		processorData.gusers.dynos.push(getDyno(line));
	}
}

//display stats
var reportStats = function(processorData){
	console.log("URL : count_pending_messages");
	console.log("\t CPM count : ", processorData.cpm.count);
	console.log("\t CPM average reponse time : ", getAverageTime(processorData.cpm.timeResponses));
	console.log("\t CPM median reponse time : ", getMedianTime(processorData.cpm.timeResponses));
	console.log("\t CPM reponse time mode(s) : ", getMode(processorData.cpm.timeResponses));
	console.log("\t CPM most used dyno : ", getMode(processorData.cpm.dynos));
		
	console.log("URL : get_messages");
	console.log("\t GM count : ", processorData.gm.count);
	console.log("\t GM average reponse time : ", getAverageTime(processorData.gm.timeResponses));
	console.log("\t GM median reponse time : ", getMedianTime(processorData.gm.timeResponses));
	console.log("\t GM reponse time mode(s) : ", getMode(processorData.gm.timeResponses));
	console.log("\t GM most used dyno : ", getMode(processorData.gm.dynos));
	
	console.log("URL : get_friends_progress");
	console.log("\t GFP count : ", processorData.gfp.count);
	console.log("\t GFP average reponse time : ", getAverageTime(processorData.gfp.timeResponses));
	console.log("\t GFP median reponse time : ", getMedianTime(processorData.gfp.timeResponses));
	console.log("\t GFP reponse time mode(s) : ", getMode(processorData.gfp.timeResponses));
	console.log("\t GFP most used dyno : ", getMode(processorData.gfp.dynos));
	
	console.log("URL : get_friends_score");
	console.log("\tGFS count : ", processorData.gfs.count);
	console.log("\t GFS average reponse time : ", getAverageTime(processorData.gfs.timeResponses));
	console.log("\t GFS median reponse time : ", getMedianTime(processorData.gfs.timeResponses));
	console.log("\t GFS reponse time mode(s) : ", getMode(processorData.gfs.timeResponses));
	console.log("\t GFS most used dyno : ", getMode(processorData.gfs.dynos));
	
	console.log("URL : POST /api/users");
	console.log("\t PUsers count : ", processorData.pusers.count);
	console.log("\t PUsers average reponse time : ", getAverageTime(processorData.pusers.timeResponses));
	console.log("\t PUsers median reponse time : ", getMedianTime(processorData.pusers.timeResponses));
	console.log("\t Pusers reponse time mode(s) : ", getMode(processorData.pusers.timeResponses));
	console.log("\t PUsers most used dyno : ", getMode(processorData.pusers.dynos));
	
	console.log("URL : GET /api/users");
	console.log("\t GUsers count : ", processorData.gusers.count);
	console.log("\t GUsers average reponse time : ", getAverageTime(processorData.gusers.timeResponses));
	console.log("\t GUsers median reponse time : ", getMedianTime(processorData.gusers.timeResponses));
	console.log("\t Gusers reponse time mode(s) : ", getMode(processorData.gusers.timeResponses));
	console.log("\t GUsers most used dyno : ", getMode(processorData.gusers.dynos));
}



/********** private functions ****************/

//process line to store response times 
var getReponseTime = function(line){

	line = line.split(" ");	//split the line to be able to go trhough each information one by one
	var connect, service; //variables to store connect time and service time
	
	//go through the array of data from the line
	for(var i =0; i < line.length; i++){
		if(line[i].indexOf('connect') != -1){//if we detect the connect time item
			var start = line[i].indexOf("=") + 1; //we get the time position in the item +1 (position of the time)
			var stop = line[i].indexOf("ms"); //we get the time end position in the item 
			var subLength = stop - start; // we need to calculate the length of the substring (connect time) we need to extract
			connect = line[i].substr(start, subLength); //we get the connect time
		}
		
		if(line[i].indexOf('service') != -1){//if we detect the service time item
			var start = line[i].indexOf("=") + 1;
			var stop = line[i].indexOf("ms");
			var subLength = stop - start;
			service = line[i].substr(start, subLength);
		}
	}
	
	return +connect + +service; //we need to use the unary plus operator to prevent string concatenation
}

//process line to store the dyno used
var getDyno = function(line){
	line = line.split(" ");	//split the line to be able to go trhough each information one by one
	var dyno = null;
	
	//go through the array of data from the line
	for(var i =0; i < line.length; i++){
		if(line[i].indexOf('dyno') != -1){//if we detect the dyno item
			var start = line[i].indexOf("=") + 1; //we get the time position in the line
			dyno = line[i].substr(start); //we get the connect time
		}
	}

	return dyno;
}

//calculate the average response time
var getAverageTime = function(times){
	
		var total = 0;
	
		if(times.length == 0){
			return null;
		}
	
		var total = 0; //var to store the addition of all response times
		for(var i =0; i < times.length; i++){//we add the response times to the total
			//we use Math.floor to ensure we add integers or floats. We shouldn't need this due to the unary operator used in getResponseTime but it is an extra precaution.
			total += Math.floor(times[i]); 
		}
		
		return total / times.length; //we return the average response time
}


//get the median reponse time
var getMedianTime = function(times){
	
	if(times.length == 0){
		return null;
	}
	
	times.sort( function(a,b) {return a - b;} ); //we need to sort the array first

	var half = Math.floor(times.length/2); // then get the index for the middle of the array. Math.floor is here to prevent float values 

	if(times.length % 2){//if the array as an even number of items return the value in the middle
		return times[half];
	}
	else{
		return (times[half-1] + times[half]) / 2.0;	//if the array has an odd number of items return an average of the values around the middle of the array
	}
}

//get the mode of an array. Will be used for the time response mode and the most used dyno
function getMode(list)
{
    if (list.length == 0){
        return null;
    }
    
    var modeMap = {}, //stores count values
        maxCount = 1, //stores the mas number of time a value has been found in the array
        modes = []; //stores found mode(s), there could be multiple

    for(var i = 0; i < list.length; i++)
    {
        var el = list[i];

        if (modeMap[el] == null)
            modeMap[el] = 1;
        else
            modeMap[el]++;

        if (modeMap[el] > maxCount)
        {
            modes = [el];
            maxCount = modeMap[el];
        }
        else if (modeMap[el] == maxCount)
        {
            modes.push(el);
            maxCount = modeMap[el];
        }
    }
    return modes;
}

exports.reportStats = reportStats;
exports.getLineStat = getLineStat;